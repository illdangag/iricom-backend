plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'checkstyle' // code convention을 확인 하기 위함
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' // git 정보
    id "org.asciidoctor.jvm.convert" version "3.3.2" // spring rest docs의 asciidoc을 지원 하기 위함
}

group = 'com.illdangag.iricom'
version = '0.7.0'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // classpath의 파일이 변경된 경우 서버 자동 재시작 기능
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // spring MVC를 위한 기본적인 종속, 내장 Tomcat 포함
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 스프링에서 jpa를 사용
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // annotation 기반의 데이터 검증 자동화
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // annotation 기반의 자동 코드 생성
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mariadb 접속
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.0'

    // 계정의 인증
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // spring 테스트
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit' // junit 특정 버전을 사용하기 위해서 기본 junit을 포함하지 않도록 함
    }
    // junit
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"

    // 테스트 코드에서 lombok을 사용하기 위함
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 테스트 환경에서 사용 할 데이터베이스
    testImplementation 'com.h2database:h2:2.1.214'

    // spring rest docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// code convention을 확인 하기 위한 checkstyle 결과 추출
checkstyle {
    ignoreFailures = true
    configFile = file("checkstyle.xml")
    reportsDir = file("${buildDir}/checkstyle-output")
}

tasks.named('test') {
    useJUnitPlatform()
}

// spring rest docs
ext {
    snippetsDir = file('build/generated-snippets')
}


test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir

    sources{
        include("**/index.adoc","**/common/*.adoc")
    }

    baseDirFollowsSourceFile()

    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}