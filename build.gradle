plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'checkstyle' // code convention을 확인 하기 위함
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' // git 정보
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.illdangag.iricom'
version = '0.4.3-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // classpath의 파일이 변경된 경우 서버 자동 재시작 기능
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // spring MVC를 위한 기본적인 종속, 내장 Tomcat 포함
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 스프링에서 jpa를 사용
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // annotation 기반의 데이터 검증 자동화
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // annotation 기반의 자동 코드 생성
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // mariadb 접속
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.1.0'

    // 계정의 인증
    implementation 'com.google.firebase:firebase-admin:9.1.1'

    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // spring 테스트
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit' // junit 특정 버전을 사용하기 위해서 기본 junit을 포함하지 않도록 함
    }
    // junit
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"

    // 테스트 코드에서 lombok을 사용하기 위함
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // 테스트 환경에서 사용 할 데이터베이스
    testImplementation 'com.h2database:h2:2.1.214'

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

// code convention을 확인 하기 위한 checkstyle 결과 추출
checkstyle {
    ignoreFailures = true
    configFile = file("checkstyle.xml")
    reportsDir = file("${buildDir}/checkstyle-output")
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
//    sources{
//        include("**/index.adoc","**/common/*.adoc")
//    }

    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}


// 참고사항 //
// 공식 문서에서는 위의 ascidoctor.doFirst부터 아래 내용은 없고 이와 같은 내용만 있습니다.
// 이렇게 하면 jar로 만들어 질때 옮겨지는 것으로 IDE로 돌릴 때는 build 폴더에서만 확인이 가능합니다.
// 위 방법을 사용하면 IDE에서도 static으로 옮겨진 것을 확인할 수 있습니다.
// 위에 방법을 사용하든 아래 방법을 사용하든 편한 선택지를 사용하시면 됩니다.
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
