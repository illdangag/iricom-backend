import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'checkstyle' // code convention
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' // git 정보
}

gitProperties {
    gitPropertiesName = 'storage-git.properties'
}

version = '0.0.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':iricom-server')
    testImplementation(testFixtures(project(':iricom-server')))

    implementation 'org.springframework.boot:spring-boot-starter-web' // spring MVC를 위한 기본적인 종속, 내장 Tomcat 포함
    implementation 'org.springframework.boot:spring-boot-starter-validation' // annotation 기반의 데이터 검증 자동화
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // spring jpa

    // annotation 기반의 자동 코드 생성
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') { // spring 테스트
        exclude group: 'junit', module: 'junit' // junit 특정 버전을 사용하기 위해서 기본 junit을 포함하지 않도록 함
    }
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"

    // 테스트 코드에서 lombok을 사용하기 위함
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'com.h2database:h2:2.1.214' // 테스트 환경에서 사용 할 데이터베이스
    testImplementation project(':iricom-storage:iricom-storage-file')
}

processResources.doLast {
    SimpleDateFormat sdf = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss:SSS');
    def contents =
            'storage.version=' + version + '\n' +
            'storage.timestamp=' + sdf.format(new Date()) + '\n'
    println contents
    file('./build/resources/main/storage-version.properties').text += contents
}

// code convention
checkstyle {
    ignoreFailures = true
    configFile = file("../checkstyle.xml")
    reportsDir = file("${buildDir}/checkstyle-output")
}

test {
    dependsOn checkstyleMain, checkstyleTest

    useJUnitPlatform()
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}
