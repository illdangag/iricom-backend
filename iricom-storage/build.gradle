import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'checkstyle' // code convention
    id 'com.gorylenko.gradle-git-properties' version '2.4.1' // git 정보
    id "org.asciidoctor.jvm.convert" version "3.3.2" // spring rest docs의 asciidoc을 지원 하기 위함
}

version = '0.1.0'

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets') // restdocs에서 생성 될 파일의 경로
}

configurations {
    asciidoctorExtensions

    compileOnly {
        extendsFrom annotationProcessor
    }
}

gitProperties {
    gitPropertiesName = 'storage-git.properties'
}

dependencies {
    // 상위 프로젝트 의존성
    implementation project(':iricom-server')
    testImplementation(testFixtures(project(':iricom-server')))

    // spring 의존성
    implementation 'org.springframework.boot:spring-boot-starter-web' // spring MVC를 위한 기본적인 종속, 내장 Tomcat 포함
    implementation 'org.springframework.boot:spring-boot-starter-validation' // annotation 기반의 데이터 검증 자동화
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // spring jpa

    // 프로젝트 의존성
    compileOnly 'org.projectlombok:lombok' // lombok
    annotationProcessor 'org.projectlombok:lombok' // lombok
    implementation 'commons-io:commons-io:2.13.0' // 파일 및 경로 관련 처리

    // 프로젝트 테스트 의존성
    testImplementation('org.springframework.boot:spring-boot-starter-test') { // spring 테스트
        exclude group: 'junit', module: 'junit' // junit 특정 버전을 사용하기 위해서 기본 junit을 포함하지 않도록 함
    }
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testCompileOnly 'org.projectlombok:lombok' // lombok
    testAnnotationProcessor 'org.projectlombok:lombok' // lombok
    testImplementation 'com.h2database:h2:2.1.214' // 테스트 환경에서 사용 할 데이터베이스
    testImplementation project(':iricom-storage:iricom-storage-file') // 테스트 코드 동작시 storage 관련 구현체

    // restdocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

processResources.doLast { // 프로젝트 버전
    SimpleDateFormat sdf = new SimpleDateFormat('yyyy-MM-dd HH:mm:ss:SSS');
    def contents =
            'storage.version=' + version + '\n' +
            'storage.timestamp=' + sdf.format(new Date()) + '\n'
    println contents
    file('./build/resources/main/storage-version.properties').text += contents
}

checkstyle { // code convention
    ignoreFailures = true
    configFile = file("../checkstyle.xml")
    reportsDir = file("${buildDir}/checkstyle-output")
}

asciidoctor {
    dependsOn test

    configurations 'asciidoctorExtensions'
    inputs.dir snippetsDir

    sources {
        include('**/storage.adoc', '**/common/*.adoc')
    }

    baseDirFollowsSourceFile()

    copy {
        from "build/docs/asciidoc"
        into "src/main/resources/static/docs"
    }

    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

test {
    dependsOn checkstyleMain, checkstyleTest

    outputs.dir snippetsDir
    useJUnitPlatform()
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}
